// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc620.KevinWithDOB.commands;

import org.usfirst.frc620.KevinWithDOB.Robot;
import org.usfirst.frc620.KevinWithDOB.RobotMap;

import edu.wpi.first.wpilibj.command.Command;

public class DevourExpel extends Command {
	
	private boolean shouldDevour;
	private long endTime;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DevourExpel(boolean devour) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
    	
    	shouldDevour = devour;
    	RobotMap.dOBWindowMotor.setControlMode(0);
    	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.dOB);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    
    /**
     * Created mainly so that the call to {@code new DevourExpel()} in the {@link OI} would
     * compile. It was bugging me. It assigns {@link DevourExpel#shouldDevour} an initial value
     * of {@code false}.
     * <p>
     * It is preferable in virtually every situation to call {@link #DevourExpel(boolean)} 
     * for this class.
     */
    public DevourExpel() {
    	shouldDevour = false;
    	RobotMap.dOBWindowMotor.setControlMode(0);
    	requires(Robot.dOB);
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	endTime = System.currentTimeMillis() + 6000;
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	if(shouldDevour)
    		RobotMap.dOBWindowMotor.set(.5); // Actual value TBD
    	else
    		RobotMap.dOBWindowMotor.set(-.5); // Actual value TBD
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return System.currentTimeMillis() >= endTime;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
